/*
 * GUI to run the program. Also contains the implementation of some of the worker methods
 * void: searchDictionary (String) --main search method that checks for wildcards and handles
 * their permutations appropriately
 * void: permutate (String, String)--does the heavy lifting for permutations and dictionary checks
 * void: playHand(String) --starting method to figure out where the word will be played on the board.
 *          Makes decisions on when to save blank tiles or swap.
 * void: swap(String) -- method for swapping out tiles in a bad hand
 * void: clear() --resets global variables
 * void: runScrabbleAgent(String) -- combines multiple function calls to play the word
 * char: checkLetter(char) -- returns vowel or consonant
 */
package scrabble;

import java.io.File;
import java.util.ArrayList;
import javax.swing.JFileChooser;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
/**
 *
 * @author Milda
 */
public class Scrabble extends javax.swing.JFrame {

      static boolean wcFlag = false;
      static Map<String, Integer> possibleWords = new HashMap<String,Integer>(); //keep track of possible words
      static Dictionary sowpods; 
    
    /**
     * Creates new form Scrabble
     */
    public Scrabble() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();
        jTextField5 = new javax.swing.JTextField();
        jTextField6 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jTextField7 = new javax.swing.JTextField();
        jTextField11 = new javax.swing.JTextField();
        jTextField8 = new javax.swing.JTextField();
        jTextField12 = new javax.swing.JTextField();
        jTextField13 = new javax.swing.JTextField();
        jTextField9 = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jTextField10 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jTextField14 = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Scrabble Fun!");

        jPanel3.setLayout(new java.awt.GridLayout());

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("0");
        jPanel3.add(jLabel2);

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("1");
        jPanel3.add(jLabel3);

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("2");
        jPanel3.add(jLabel4);

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("3");
        jPanel3.add(jLabel5);

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("4");
        jPanel3.add(jLabel6);

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("5");
        jPanel3.add(jLabel7);

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("6");
        jPanel3.add(jLabel8);

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setText("7");
        jPanel3.add(jLabel9);

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setText("8");
        jPanel3.add(jLabel10);

        jLabel11.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setText("9");
        jPanel3.add(jLabel11);

        jLabel12.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel12.setText("10");
        jPanel3.add(jLabel12);

        jLabel13.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel13.setText("11");
        jPanel3.add(jLabel13);

        jLabel14.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel14.setText("12");
        jPanel3.add(jLabel14);

        jPanel2.setLayout(new javax.swing.BoxLayout(jPanel2, javax.swing.BoxLayout.LINE_AXIS));

        jTextField1.setBackground(new java.awt.Color(255, 255, 204));
        jTextField1.setPreferredSize(new java.awt.Dimension(70, 20));
        jPanel2.add(jTextField1);

        jTextField2.setBackground(new java.awt.Color(255, 255, 204));
        jTextField2.setPreferredSize(new java.awt.Dimension(70, 20));
        jPanel2.add(jTextField2);

        jTextField3.setBackground(new java.awt.Color(0, 204, 204));
        jTextField3.setText("Letter x2");
        jTextField3.setPreferredSize(new java.awt.Dimension(70, 20));
        jPanel2.add(jTextField3);

        jTextField4.setBackground(new java.awt.Color(255, 255, 204));
        jTextField4.setPreferredSize(new java.awt.Dimension(70, 20));
        jPanel2.add(jTextField4);

        jTextField5.setBackground(new java.awt.Color(255, 255, 204));
        jTextField5.setPreferredSize(new java.awt.Dimension(70, 20));
        jPanel2.add(jTextField5);

        jTextField6.setBackground(new java.awt.Color(255, 255, 204));
        jTextField6.setPreferredSize(new java.awt.Dimension(70, 20));
        jPanel2.add(jTextField6);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/scrabble/icon.png"))); // NOI18N
        jLabel1.setPreferredSize(new java.awt.Dimension(70, 20));
        jPanel2.add(jLabel1);

        jTextField7.setBackground(new java.awt.Color(255, 255, 204));
        jTextField7.setPreferredSize(new java.awt.Dimension(70, 20));
        jPanel2.add(jTextField7);

        jTextField11.setBackground(new java.awt.Color(255, 255, 204));
        jTextField11.setPreferredSize(new java.awt.Dimension(70, 20));
        jPanel2.add(jTextField11);

        jTextField8.setBackground(new java.awt.Color(255, 255, 204));
        jTextField8.setPreferredSize(new java.awt.Dimension(70, 20));
        jPanel2.add(jTextField8);

        jTextField12.setBackground(new java.awt.Color(0, 204, 204));
        jTextField12.setText("Letter x2");
        jTextField12.setPreferredSize(new java.awt.Dimension(70, 20));
        jPanel2.add(jTextField12);

        jTextField13.setBackground(new java.awt.Color(255, 255, 204));
        jTextField13.setPreferredSize(new java.awt.Dimension(70, 20));
        jPanel2.add(jTextField13);

        jTextField9.setBackground(new java.awt.Color(255, 255, 204));
        jTextField9.setPreferredSize(new java.awt.Dimension(70, 20));
        jPanel2.add(jTextField9);

        jPanel1.setLayout(null);
        jPanel1.add(jTextField10);
        jTextField10.setBounds(20, 10, 480, 40);

        jButton1.setText("Load Dictionary");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1);
        jButton1.setBounds(530, 10, 340, 40);
        jPanel1.add(jTextField14);
        jTextField14.setBounds(20, 62, 480, 40);

        jButton2.setText("Load Test Racks");
        jButton2.setEnabled(false);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton2);
        jButton2.setBounds(530, 65, 340, 40);

        jButton3.setText("START");
        jButton3.setEnabled(false);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton3);
        jButton3.setBounds(259, 115, 430, 30);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane2.setViewportView(jTextArea1);

        jPanel1.add(jScrollPane2);
        jScrollPane2.setBounds(10, 150, 870, 310);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 870, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 870, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 890, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 469, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        JFileChooser dict = new JFileChooser();
        dict.showOpenDialog(null);
        File f = dict.getSelectedFile();
        String fileName = f.getAbsolutePath();
        jTextField10.setText(fileName);
        jButton2.setEnabled(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        JFileChooser racks = new JFileChooser();
        racks.showOpenDialog(null);
        File f = racks.getSelectedFile();
        String fileName = f.getAbsolutePath();
        jTextField14.setText(fileName);
         jButton3.setEnabled(true);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        final long startTime = System.currentTimeMillis();
        sowpods = new Dictionary(jTextField10.getText()); //load dictionary    
        Rack hands = new Rack(jTextField14.getText()); //load racks to test
           
        for(String hand: hands.getRacks()){
            final long searchStartTime = System.currentTimeMillis();
           // jTextArea1.append("---------*****----------\n");
            
            jTextArea1.append("RACK: " + hand + "\n");
            runScrabbleAgent(hand);
            final long searchEndTime = System.currentTimeMillis();
            jTextArea1.append("Total rack solving time: " + (searchEndTime - searchStartTime) +" ms\n" );
            jTextArea1.append("---------*****----------\n");
          }
        final long endTime = System.currentTimeMillis();

jTextArea1.append("Total batch execution time: " + (endTime - startTime) +" ms\n" );
            
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Scrabble.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Scrabble.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Scrabble.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Scrabble.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Scrabble().setVisible(true);
            }
        });  
        
    }
    
    /**Main method for initializing a dictionary search. Uses a helper method permutate
     * Manages blanks by evaluating if they're present and running multiple permutations substituting letters
     * @param rack 
     */
    
       public static void searchDictionary(String rack) {
        int wildcards = 0;
        wcFlag = false;
        
        for(int i = 0; i < rack.length(); i++){
            if(rack.charAt(i) == '_' ){
                wildcards++;
            }
        }
        
        String truncated = rack.replace("_", ""); //replace wildcards
        
        if(wildcards == 2){
            wcFlag = true;
            for(char abc = 'A'; abc <= 'Z'; abc++){
                for(char abc2 = 'A'; abc2 <= 'Z'; abc2++){
                    String temp = truncated+abc+abc2; //build a string replacing blanks with letters
                    permutate("", temp);
                }
            }           
        }
        else if (wildcards == 1){
            wcFlag = true;
            for(char abc2 = 'A'; abc2 <= 'Z'; abc2++){
                    String temp = truncated+abc2; //build a string replacing one blank with a letter
                    permutate("", temp);
                }
        }
        else{    
            permutate("", rack); 
        }
    }
/**
 * Permutate - method for getting all permutations of a string that are acceptable words
 * in the given dictionary
 * @param prefix
 * @param str 
 */
    private static void permutate(String prefix, String str) {
        
        int len = str.length();

        if (sowpods.search(prefix) > 0){
            if(wcFlag){
                if(prefix.length() == 7)
                   possibleWords.put(prefix, sowpods.search(prefix)); 
            }
            else
            possibleWords.put(prefix, sowpods.search(prefix));
        }

            for (int i = 0; i < len; i++){

                String pref = prefix + str.charAt(i);
                //check if the current prefix starts a word in dictionary
                if(sowpods.isPrefix(pref))
                    permutate(pref, str.substring(0, i) + str.substring(i+1, len));
            }
    }
    /**
     * playHand: method that decides how to play the wildcards and calls Board
     * object methods to determine the winning play
     * @param hand 
     */

    public static void playHand(String hand){
        
        if(possibleWords.isEmpty()){ //check for a bad hand
            swap(hand);
            return;
        }
        Board sb = new Board(); 
        Winner win = new Winner("", 0, 0); //object for storing winning attributes
        
     //Takes 5 top scoring words from the viable word pool and based on board placement
    //finds the highest scoring one. If there are multiple equally-highest scored words,
    //takes the first one.
        MapSort m = new MapSort();
        String [] topFive;
        topFive = m.sort(possibleWords);
        
        if(!wcFlag){
            win = sb.findSpot(topFive,""); //no flags indicated by empty string for rack
        }
        else{//if there are wildcards in play, the only time we want to make a move using them is when you have a BINGO
            int count = 0;
            String[] bingo = new String[5];
          //  List<Map.Entry<String, Integer>> list = new ArrayList<>(possibleWords.entrySet());
            for(String e: topFive){
                if(e != null){
                    if(e.length() == 7){
                        bingo[count] = e;
                        count++; 
                    }
                }
            }  
            
            if(count == 0){
                String truncated = hand.replace("_", ""); //replace wildcards
                jTextArea1.append("Agent decided to save the blank tile(s) and made a move from remaining tiles. \n");
                possibleWords.clear(); //clear current contents
                searchDictionary(truncated);
                playHand(truncated);
                return;
            }
            else{
               win = sb.findSpot(bingo, hand);
            }
        }
   
        
        jTextArea1.append("************And the winner is: " + win.getWord() + " at location " + win.getLoc() + " with a score of " + win.getScore() + "\n");
    }
   
    //Realistically, would be fleshed out to swap selected tiles (based on heuristics) to some tiles from the bag,
    //taking into account letter availability and frequency
    public static void swap(String hand){
        Alphabet abc = new Alphabet();
        String swap = "";
        int count = 0;
        int vowels = 0;
        int cons = 0;
        
        for(int i = 0; i < hand.length(); i++){         
            //track vowel vs consonant balance
                if(checkLetter(hand.charAt(i))=='V' )
                    vowels++;
                else
                    cons++;
        }
        
        for(int i = 0; i < hand.length(); i++){
            int v = abc.getValue(hand.charAt(i));
                
                if(v == 1 && hand.charAt(i) != 'S' && hand.charAt(i) != 'Q' && hand.charAt(i) != 'X'){ //save valuable letters
                    if(checkLetter(hand.charAt(i)) == 'V' && vowels > 3){
                        swap += hand.charAt(i);
                        count++;
                        vowels--;
                    }
                    if(checkLetter(hand.charAt(i)) == 'C' && cons > 3){
                        swap += hand.charAt(i);
                        count++;
                        cons--;
                    }
                        
                }
                
            if(count == 3)
                break;
        }
        if(count == 0)
            jTextArea1.append("The agent chose to pass the turn \n");
        else
            jTextArea1.append("The agent chose to swap the following tiles: " + swap + "\n");
    }
    public static char checkLetter(char a){
        char res = '*';
        switch(a){
            case 'A':
            case 'E':
            case 'I':
            case 'O':
            case 'U':
                res = 'V';
                break;
            default:
                res = 'C';
            }
        return res;
    }
    
    //Resets global variables
    public static void clear(){
        possibleWords.clear();  
        wcFlag = false;
    }
    
    //agent to tie the work together
    public static void runScrabbleAgent(String s){
        searchDictionary(s);
        playHand(s);
        clear();
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane2;
    private static javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField10;
    private javax.swing.JTextField jTextField11;
    private javax.swing.JTextField jTextField12;
    private javax.swing.JTextField jTextField13;
    private javax.swing.JTextField jTextField14;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField7;
    private javax.swing.JTextField jTextField8;
    private javax.swing.JTextField jTextField9;
    // End of variables declaration//GEN-END:variables
}
